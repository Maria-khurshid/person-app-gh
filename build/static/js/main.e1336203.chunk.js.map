{"version":3,"sources":["components/PersonInfo.jsx","components/PersonEdit.jsx","components/Person.jsx","components/Persons.jsx","App.js","serviceWorker.js","index.js"],"names":["PersonInfo","props","Card","Body","Title","Text","value","person","name","type","age","description","ButtonGroup","aria-label","Button","variant","className","icon","faEdit","faTrash","PersonEdit","faCheck","faTimes","Person","style","width","isEdited","Persons","map","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6UAMe,SAASA,EAAWC,GACjC,OACE,kBAACC,EAAA,EAAKC,KAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,oBACA,kBAACF,EAAA,EAAKG,KAAN,KACE,2BAAOC,MAAOL,EAAMM,OAAOC,OAC3B,2BAAOC,KAAK,SAASH,MAAOL,EAAMM,OAAOG,MACzC,kCAAWT,EAAMM,OAAOI,cAE1B,kBAACC,EAAA,EAAD,CAAaC,aAAW,iBACtB,kBAACC,EAAA,EAAD,CAAQC,QAAQ,SACd,kBAAC,IAAD,CAAiBC,UAAU,YAAYC,KAAMC,OAE/C,kBAACJ,EAAA,EAAD,CAAQC,QAAQ,SACd,kBAAC,IAAD,CAAiBC,UAAU,cAAcC,KAAME,SCd1C,SAASC,EAAWnB,GACjC,OACE,kBAACC,EAAA,EAAKC,KAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,oBACA,kBAACF,EAAA,EAAKG,KAAN,KACE,2BAAOC,MAAOL,EAAMM,OAAOC,OAC3B,2BAAOC,KAAK,SAASH,MAAOL,EAAMM,OAAOG,MACzC,kCAAWT,EAAMM,OAAOI,cAE1B,kBAACC,EAAA,EAAD,CAAaC,aAAW,iBACtB,kBAACC,EAAA,EAAD,CAAQC,QAAQ,SACd,kBAAC,IAAD,CAAiBC,UAAU,YAAYC,KAAMI,OAE/C,kBAACP,EAAA,EAAD,CAAQC,QAAQ,SACd,kBAAC,IAAD,CAAiBC,UAAU,cAAcC,KAAMK,SCb1C,SAASC,EAAOtB,GAC7B,OACE,kBAACC,EAAA,EAAD,CAAMsB,MAAO,CAAEC,MAAO,SAAWT,UAAU,UACxCf,EAAMM,OAAOmB,SACZ,kBAACN,EAAD,CAAYb,OAAQN,EAAMM,SAE1B,kBAACP,EAAD,CAAYO,OAAQN,EAAMM,U,MCVnB,SAASoB,IAqBtB,OACE,yBAAKX,UAAU,WACb,uCAtBe,CACjB,CACER,KAAM,OACNE,IAAK,GACLC,YAAa,oBACbe,UAAU,GAEZ,CACElB,KAAM,QACNE,IAAK,GACLC,YAAa,oBACbe,UAAU,GAEZ,CACElB,KAAM,QACNE,IAAK,GACLC,YAAa,MACbe,UAAU,IAMEE,KAAI,SAAArB,GAAM,OACpB,kBAAC,EAAD,CAAQA,OAAQA,Q,MCfTsB,MARf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,QCIcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e1336203.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropType from \"prop-types\";\r\nimport { Button, Card, ButtonGroup } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function PersonInfo(props) {\r\n  return (\r\n    <Card.Body>\r\n      <Card.Title>person Info</Card.Title>\r\n      <Card.Text>\r\n        <input value={props.person.name} />\r\n        <input type=\"number\" value={props.person.age} />\r\n        <textarea>{props.person.description}</textarea>\r\n      </Card.Text>\r\n      <ButtonGroup aria-label=\"Basic example\">\r\n        <Button variant=\"light\">\r\n          <FontAwesomeIcon className=\"text-info\" icon={faEdit} />\r\n        </Button>\r\n        <Button variant=\"light\">\r\n          <FontAwesomeIcon className=\"text-danger\" icon={faTrash} />\r\n        </Button>\r\n      </ButtonGroup>\r\n    </Card.Body>\r\n  );\r\n}\r\nPersonInfo.propTypes = {\r\n  person: PropType.object\r\n};\r\n","import React from \"react\";\r\nimport PropType from \"prop-types\";\r\nimport { Button, Card, ButtonGroup } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheck, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function PersonEdit(props) {\r\n  return (\r\n    <Card.Body>\r\n      <Card.Title>person Edit</Card.Title>\r\n      <Card.Text>\r\n        <input value={props.person.name} />\r\n        <input type=\"number\" value={props.person.age} />\r\n        <textarea>{props.person.description}</textarea>\r\n      </Card.Text>\r\n      <ButtonGroup aria-label=\"Basic example\">\r\n        <Button variant=\"light\">\r\n          <FontAwesomeIcon className=\"text-info\" icon={faCheck} />\r\n        </Button>\r\n        <Button variant=\"light\">\r\n          <FontAwesomeIcon className=\"text-danger\" icon={faTimes} />\r\n        </Button>\r\n      </ButtonGroup>\r\n    </Card.Body>\r\n  );\r\n}\r\nPersonEdit.propTypes = {\r\n  person: PropType.object\r\n};\r\n","import React from \"react\";\r\nimport \"./Person.css\";\r\nimport PersonInfo from \"./PersonInfo\";\r\nimport PersonEdit from \"./PersonEdit\";\r\nimport PropType from \"prop-types\";\r\nimport { Card } from \"react-bootstrap\";\r\n\r\nexport default function Person(props) {\r\n  return (\r\n    <Card style={{ width: \"18rem\" }} className=\"Person\">\r\n      {props.person.isEdited ? (\r\n        <PersonEdit person={props.person} />\r\n      ) : (\r\n        <PersonInfo person={props.person} />\r\n      )}\r\n    </Card>\r\n  );\r\n}\r\nPerson.propTypes = {\r\n  person: PropType.object\r\n};\r\n","import React from \"react\";\r\nimport Person from \"./Person\";\r\nimport \"./Persons.css\";\r\nexport default function Persons() {\r\n  const personData = [\r\n    {\r\n      name: \"Hina\",\r\n      age: 19,\r\n      description: \"Teacher at school\",\r\n      isEdited: true\r\n    },\r\n    {\r\n      name: \"Sepna\",\r\n      age: 10,\r\n      description: \"Happiness officer\",\r\n      isEdited: false\r\n    },\r\n    {\r\n      name: \"Sadia\",\r\n      age: 16,\r\n      description: \"CEO\",\r\n      isEdited: true\r\n    }\r\n  ];\r\n  return (\r\n    <div className=\"Persons\">\r\n      <h1>Persons</h1>\r\n      {personData.map(person => (\r\n        <Person person={person} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Persons from \"./components/Persons\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Persons />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}